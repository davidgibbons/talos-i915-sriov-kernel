concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

on:
  schedule:
    - cron: 0 2 * * *
  push:
    branches:
      - main
  workflow_dispatch:

name: default
jobs:
  default:
    permissions:
      actions: read
      contents: write
      issues: read
      packages: write
      pull-requests: read

    runs-on: runner-large

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Get release
        id: get-release
        run: |
          which gh || sudo apt-get update && sudo apt-get install -y gh
          RELEASE=$(gh release view --json tagName --jq '.tagName' -R siderolabs/talos)
          echo "release=$RELEASE" >> $GITHUB_OUTPUT

          RELEASE_BRANCH="release-$(echo $RELEASE | grep -oP '(?<=v)[0-9]\.[0-9]+')"
          echo "release-branch=$RELEASE_BRANCH" >> $GITHUB_OUTPUT

          KERNEL_IMAGE_TAG="${RELEASE}-${GITHUB_SHA::8}"
          echo "KERNEL_IMAGE_TAG=$KERNEL_IMAGE_TAG" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          password: ${{ github.token }}
          registry: ghcr.io
          username: ${{ github.repository_owner }}

      - name: Checkout talos
        uses: actions/checkout@v5
        with:
          repository: siderolabs/talos
          ref: ${{ steps.get-release.outputs.release }}
          path: talos

      - name: Checkout pkgs
        uses: actions/checkout@v5
        with:
          repository: siderolabs/pkgs
          ref: ${{ steps.get-release.outputs.release-branch }}
          path: pkgs

      - name: Unshallow pkgs
        working-directory: pkgs
        run: |
          git fetch --prune --unshallow

      - name: Get pkgs Commit
        run: |
          SHORT_HASH=$(sed -r 's/v[0-9]\.[0-9]+\.[0-9]+-[0-9]+-g([a-f0-9]{6})/\1/' talos/pkg/machinery/gendata/data/pkgs)
          git -C pkgs checkout $SHORT_HASH

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up yq
        uses: frenck/action-setup-yq@v1

      - name: Apply kernel patches and merge configs
        run: |
          KERNEL_MAJOR_MINOR=v$(yq -r '.vars.linux_version' pkgs/Pkgfile |grep -oP '^[0-9]\.[0-9]+(?=\.[0-9])')

          curl -Lo merge_config.sh "https://raw.githubusercontent.com/torvalds/linux/refs/tags/${KERNEL_MAJOR_MINOR}/scripts/kconfig/merge_config.sh"
          chmod +x merge_config.sh

          cp -a patches/* pkgs/kernel/build/patches/
          make -C pkgs kernel-olddefconfig

          for cfg_file in config/*.cfg; do
            echo merging "$cfg_file"
            ./merge_config.sh -m pkgs/kernel/build/config-amd64 "$cfg_file"
          done

      - name: Build kernel
        working-directory: pkgs
        run: |
          make kernel USERNAME=${{ github.repository_owner }} TAG=$KERNEL_IMAGE_TAG PLATFORM=linux/amd64 PUSH=true

      - name: Build installer
        working-directory: talos
        env:
          PUSH: "true"
        run: |
          KERNEL_IMAGE="ghcr.io/${{ github.repository_owner }}/kernel:${KERNEL_IMAGE_TAG}"
          make installer-base USERNAME=${{ github.repository_owner }} PLATFORM=linux/amd64 PUSH=true
          make imager USERNAME=${{ github.repository_owner }} PLATFORM=linux/amd64 PUSH=true INSTALLER_ARCH=amd64 PKG_KERNEL="$KERNEL_IMAGE"
          make installer USERNAME=${{ github.repository_owner }} PLATFORM=linux/amd64 PUSH=true
          sudo chown $USER:$USER -R _out

      - name: Checkout extensions
        uses: actions/checkout@v5
        with:
          path: talos/_out/extensions
          ref: ${{ steps.get-release.outputs.release-branch }}
          repository: siderolabs/extensions

      - name: Unshallow extensions
        working-directory: talos
        run: |
          git -C _out/extensions fetch --prune --unshallow

      # TODO: Re-enable when this file is generated properly?
      # Sets PKGS, TOOLS, and TAG variables
      # - name: Set variables
      #   working-directory: talos
      #   run: |
      #     cat _out/talos-metadata >> "$GITHUB_ENV"

      - name: Build extensions
        working-directory: talos
        run: |
          make all extensions-metadata USERNAME=${{ github.repository_owner }} PLATFORM=linux/amd64 PUSH=true TAG=${{ steps.get-release.outputs.release }} -C _out/extensions

      - name: Create installer
        working-directory: talos
        env:
          USERNAME: ${{ github.repository_owner }}
        run: |
          make installer-with-extensions USERNAME=${{ github.repository_owner }} PLATFORM=linux/amd64 PUSH=true TAG=${{ steps.get-release.outputs.release }}
