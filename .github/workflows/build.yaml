concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

on:
  # schedule:
  #   - cron: 0 2 * * *
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      extensions:
        description: "Space-separated list of extensions to build (e.g. 'i915 qemu-guest-agent')."
        type: string
        required: false
        default: "i915 qemu-guest-agent"
      version:
        description: "Talos version to build against (e.g. v1.11.0). If empty, uses latest release."
        type: string
        required: false
        default: ""

name: default
jobs:
  default:
    permissions:
      actions: read
      contents: write
      issues: read
      packages: write
      pull-requests: read

    runs-on: runner-large

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Get release
        id: get-release
        run: |
          which gh || sudo apt-get update && sudo apt-get install -y gh
          RELEASE=$(gh release view --json tagName --jq '.tagName' -R siderolabs/talos)
          if [ -n "${{ inputs.version }}" ]; then
            RELEASE="${{ inputs.version }}"
          fi
          echo "release=$RELEASE" >> $GITHUB_OUTPUT

          RELEASE_BRANCH="release-$(echo $RELEASE | grep -oP '(?<=v)[0-9]\.[0-9]+')"
          echo "release-branch=$RELEASE_BRANCH" >> $GITHUB_OUTPUT

          KERNEL_IMAGE_TAG="${RELEASE}-${GITHUB_SHA::8}"
          echo "KERNEL_IMAGE_TAG=$KERNEL_IMAGE_TAG" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          password: ${{ github.token }}
          registry: ghcr.io
          username: ${{ github.repository_owner }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up yq
        uses: frenck/action-setup-yq@v1

      - name: Set up crane
        uses: imjasonh/setup-crane@v0.4

      - name: Build kernel
        run: |
          make kernel USERNAME=${{ github.repository_owner }} TAG=$KERNEL_IMAGE_TAG PLATFORM=linux/amd64 PUSH=true

          KERNEL_IMAGE="ghcr.io/${{ github.repository_owner }}/kernel:${KERNEL_IMAGE_TAG}"
          echo "KERNEL_IMAGE=$KERNEL_IMAGE" >> $GITHUB_ENV

      - name: Checkout talos
        uses: actions/checkout@v5
        with:
          repository: siderolabs/talos
          ref: ${{ steps.get-release.outputs.release }}
          path: talos

      - name: Checkout pkgs
        uses: actions/checkout@v5
        with:
          repository: siderolabs/pkgs
          ref: ${{ steps.get-release.outputs.release-branch }}
          path: pkgs

      - name: Unshallow pkgs
        working-directory: pkgs
        run: |
          git fetch --prune --unshallow

      - name: Get pkgs Commit
        run: |
          SHORT_HASH=$(sed -r 's/v[0-9]\.[0-9]+\.[0-9]+-[0-9]+-g([a-f0-9]{6})/\1/' talos/pkg/machinery/gendata/data/pkgs)
          git -C pkgs checkout $SHORT_HASH

      - name: Build pkgs
        working-directory: pkgs
        run: |
          make linux-firmware \
            USERNAME=${{ github.repository_owner }} \
            TAG=$KERNEL_IMAGE_TAG \
            PLATFORM=linux/amd64 \
            PUSH=true

      - name: Build installer-base
        working-directory: talos
        run: |
          mkdir -p _out

          make installer-base \
            USERNAME=${{ github.repository_owner }} \
            PLATFORM=linux/amd64 \
            PKG_KERNEL=$KERNEL_IMAGE \
            PUSH=true

      - name: Build imager
        working-directory: talos
        run: |
          make imager INSTALLER_ARCH=amd64 \
            USERNAME=${{ github.repository_owner }} \
            PLATFORM=linux/amd64 \
            PKG_KERNEL=$KERNEL_IMAGE \
            PUSH=true

      # - name: Build installer
      #   working-directory: talos
      #   run: |
      #     make installer \
      #       USERNAME=${{ github.repository_owner }} \
      #       PLATFORM=linux/amd64 \
      #       PKG_KERNEL=$KERNEL_IMAGE \
      #       PUSH=true

      #     # _out and its contents gets created/chowned as root inside the container
      #     sudo chown -R $USER:$USER _out

      - name: Checkout extensions
        uses: actions/checkout@v5
        with:
          path: talos/_out/extensions
          ref: ${{ steps.get-release.outputs.release-branch }}
          repository: siderolabs/extensions

      - name: Unshallow extensions
        working-directory: talos
        run: |
          git -C _out/extensions fetch --prune --unshallow

      # TODO: Re-enable when this file is generated properly?
      # Sets PKGS, TOOLS, and TAG variables
      # - name: Set variables
      #   working-directory: talos
      #   run: |
      #     cat _out/talos-metadata >> "$GITHUB_ENV"

      - name: Build extensions
        working-directory: talos
        run: |
          make ${{ inputs.extensions }} -C _out/extensions \
            PKGS_PREFIX=ghcr.io/${{ github.repository_owner }} \
            PKGS=${KERNEL_IMAGE_TAG} \
            USERNAME=${{ github.repository_owner }} \
            PLATFORM=linux/amd64 \
            PUSH=true \
            TAG=${{ steps.get-release.outputs.release }}

      - name: Build extensions image
        working-directory: talos
        run: |
          make extensions -C _out/extensions \
            PKGS_PREFIX=ghcr.io/${{ github.repository_owner }} \
            PKGS=${KERNEL_IMAGE_TAG} \
            USERNAME=${{ github.repository_owner }} \
            PLATFORM=linux/amd64 \
            PUSH=true \
            TAG=${{ steps.get-release.outputs.release }}

      # - name: Build image-installer
      #   working-directory: talos
      #   env:
      #     USERNAME: ${{ github.repository_owner }}
      #   run: |
      #     BASE_INSTALLER_IMAGE="ghcr.io/${{ github.repository_owner }}/installer-base:${{ steps.get-release.outputs.release }}"
      #     I915_IMAGE="ghcr.io/${{ github.repository_owner }}/i915:20250917-v1.11.2" # FIXME: Pull from extensions image
      #     QEMU_IMAGE="ghcr.io/${{ github.repository_owner }}/qemu-guest-agent:10.0.2" # FIXME: Pull from extensions image

      #     make image-installer \
      #       USERNAME=${{ github.repository_owner }} \
      #       PLATFORM=linux/amd64 \
      #       PUSH=true \
      #       TAG=${{ steps.get-release.outputs.release }} \
      #       IMAGER_ARGS="--base-installer-image=${BASE_INSTALLER_IMAGE} \
      #         --system-extension-image=${I915_IMAGE} \
      #         --system-extension-image=${QEMU_IMAGE}"
